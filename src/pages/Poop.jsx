import React, { useEffect, useMemo, useState } from "react";
import PinkGraph from "../components/PinkGraph";
import BabyTable from "../components/BabyTable";
import { countPerDayAlert } from "../utils/countAlert";
import { info, success } from "../utils/alert";
import { useAuthContext } from "../context/AuthContext";
import SelectedBabyService from "../services/SelectedBabyService";
import BabyService from "../services/BabyService";

export const Poop = () => {
  const { user } = useAuthContext();
  const [rows, setRows] = useState([]); // [{ id, date, count, checkPoop }]
  const [poopWarning, setPoopWarning] = useState(false);

  const uid = useMemo(() => user?.userId ?? user?.id ?? user?.sub, [user]);
  const selected = useMemo(() => (uid ? SelectedBabyService.get(uid) : null), [uid]);

  const tableData = useMemo(() => {
    const sorted = rows.slice().sort((a, b) => new Date(a.date) - new Date(b.date));
    return sorted.map((r, i) => ({
      "‡∏ß‡∏±‡∏ô": `‡∏ß‡∏±‡∏ô ${i + 1}`,
      "‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô": r.count,
      "Actions": (
        <button
          className="btn btn-xs bg-[#E2A9F1] text-white"
          onClick={async () => {
            const resp = await countPerDayAlert({
              title: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞",
              label: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà",
              placeholder: String(r.count),
              confirmText: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï",
            });
            if (!resp) return;
            try {
              await BabyService.updateBabyPoopLog(selected.id, r.id, {
                totalPoop: resp.count,
                userId: uid,
              });
              await loadLogs();
            } catch (err) {
              const msg = err?.response?.data?.message || err?.message || "";
              info(msg || "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            }
          }}
        >
          ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        </button>
      ),
    }));
  }, [rows]);

  const graphData = useMemo(() => {
    const sorted = rows.slice().sort((a, b) => new Date(a.date) - new Date(b.date));
    return sorted.map((r, i) => ({ name: `‡∏ß‡∏±‡∏ô ${i + 1}`, times: r.count }));
  }, [rows]);

  const dateKey = (d) => {
    const dt = d instanceof Date ? d : new Date(d);
    const yy = dt.getFullYear();
    const mm = String(dt.getMonth() + 1).padStart(2, "0");
    const dd = String(dt.getDate()).padStart(2, "0");
    return `${yy}-${mm}-${dd}`;
  };

  const hasToday = useMemo(
    () => rows.some((r) => dateKey(r.date) === dateKey(new Date())),
    [rows]
  );

  const loadLogs = async () => {
    if (!uid || !selected?.id) return;
    try {
      const res = await BabyService.showBabyPoopLogs(selected.id);
      const raw = Array.isArray(res?.data)
        ? res.data
        : Array.isArray(res?.data?.data)
        ? res.data.data
        : [];
      const mapped = raw.map((it, idx) => ({
        id: it.id ?? idx,
        date: it.date || new Date().toISOString().slice(0, 10),
        count: Number(it.totalPoop ?? 0),
        checkPoop: it.checkPoop || "",
      }));
      setRows(mapped);
    } catch {
      info("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
    }
  };

  useEffect(() => {
    loadLogs();
  }, [uid, selected?.id]);

  useEffect(() => {
    const checkWarnings = async () => {
      if (!uid || !selected?.id) return;

      const babyRes = await BabyService.getAllByUserId(uid);
      const babies = Array.isArray(babyRes?.data)
        ? babyRes.data
        : Array.isArray(babyRes?.data?.data)
        ? babyRes.data.data
        : [];

      const baby = babies.find((b) => (b?.id ?? b?.babyId) === selected.id);
      if (!baby) return;

      const birthDate = new Date(baby?.birthday || baby?.dob || baby?.birthDate);
      const ageHours = (Date.now() - birthDate.getTime()) / 3600000;
      const hasPoop = rows.length > 0;
      setPoopWarning(!hasPoop && ageHours >= 24);
    };
    checkWarnings();
  }, [uid, selected?.id, rows]);

  // ü©∑ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å checkPoop (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
  const latestCheckPoop = rows.length > 0 ? rows[rows.length - 1]?.checkPoop : "";

  return (
    <div className="w-full flex flex-col items-center justify-center mt-10 gap-6 px-6 max-w-[640px] mx-auto">
      {/* üîî ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏°. */}
      {poopWarning && (
        <div className="w-full rounded-lg border border-pink-200 bg-pink-50 px-4 py-3 text-sm text-[#6C3B73] shadow-sm">
          <strong className="font-semibold">‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞‡∏ó‡∏≤‡∏£‡∏Å:</strong>{" "}
          ‡∏´‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏£‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏≠‡∏î‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏µ‡∏ö‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        </div>
      )}

      {/* ü©∑ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å */}
      <button
        onClick={async () => {
          if (!uid || !selected?.id) {
            info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡πá‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
            return;
          }
          if (hasToday) {
            info("‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô");
            return;
          }
          const res = await countPerDayAlert({
            title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞",
            label: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô",
            placeholder: "‡πÄ‡∏ä‡πà‡∏ô 3",
          });
          if (res) {
            try {
              await BabyService.recordBabyPoop(selected.id, {
                count: res.count,
                userId: uid,
              });
              await loadLogs();
              success(`‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${res.count} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô`);
            } catch {
              info("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
            }
          }
        }}
        className="btn rounded-xl bg-[#F5D8EB] text-lg font-medium text-[#6C3B73] w-full shadow-sm"
      >
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞
      </button>

      {/* üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á */}
      <BabyTable columns={["‡∏ß‡∏±‡∏ô", "‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô", "Actions"]} data={tableData} />

      {/* üìà ‡∏Å‡∏£‡∏≤‡∏ü */}
      <PinkGraph
        data={graphData}
        lines={[{ dataKey: "times", color: "#FF66C4", label: "‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏±‡∏ô" }]}
      />

      {/* üí° ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏π‡∏õ */}
      {latestCheckPoop && (
        <div
          className={`w-full text-sm text-center mt-4 px-4 py-3 rounded-xl shadow-sm border ${
            latestCheckPoop.includes("‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")
              ? "bg-red-50 border-red-200 text-red-600"
              : "bg-green-50 border-green-200 text-green-700"
          }`}
        >
          <strong>‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:</strong> {latestCheckPoop}
        </div>
      )}

      {/* üå∏ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
      <img
        src="/src/assets/PP/pp.jpg"
        alt="baby"
        className="rounded-xl shadow-md"
      />
    </div>
  );
};
